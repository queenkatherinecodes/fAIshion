name: Azure Deploy fAIshion App

on:
  push:
    branches:
      - main  # or master, or whatever your default branch is
  workflow_dispatch:  # Allows manual triggering from GitHub UI

env:
  # Resource Group and Location
  RESOURCE_GROUP: faishion-dev-rg
  LOCATION: centralus
  
  # App Service
  APP_SERVICE_PLAN: faishion-linux-plan
  WEBAPP_NAME: faishion-dev-app
  PYTHON_VERSION: '3.9'
  
  # SQL Database
  SQL_SERVER_NAME: faishion-dev-sql
  SQL_DB_NAME: faishionDb
  SQL_ADMIN_USER: faishionadmin
  
  # Storage Account
  STORAGE_ACCOUNT_NAME: faishiondevstorage
  WARDROBE_CONTAINER: wardrobe
  OUTFITS_CONTAINER: outfits
  
  # AI Services
  COMPUTER_VISION_NAME: faishion-dev-vision
  TEXT_ANALYTICS_NAME: faishion-dev-text
  
  # Monitoring
  APP_INSIGHTS_NAME: faishion-dev-insights
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Check if App Service Plan exists
        id: check-plan
        run: |
          PLAN_EXISTS=$(az appservice plan list --query "[?name=='${{ env.APP_SERVICE_PLAN }}']" -o tsv)
          if [ -z "$PLAN_EXISTS" ]; then
            echo "APP_SERVICE_PLAN_EXISTS=false" >> $GITHUB_ENV
          else
            echo "APP_SERVICE_PLAN_EXISTS=true" >> $GITHUB_ENV
          fi
      
      - name: Create App Service Plan if not exists
        if: env.APP_SERVICE_PLAN_EXISTS == 'false'
        run: |
          az appservice plan create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.APP_SERVICE_PLAN }} \
            --is-linux \
            --sku B1 \
            --location ${{ env.LOCATION }}
      
      - name: Check if Web App exists
        id: check-webapp
        run: |
          WEBAPP_EXISTS=$(az webapp list --query "[?name=='${{ env.WEBAPP_NAME }}']" -o tsv)
          if [ -z "$WEBAPP_EXISTS" ]; then
            echo "WEBAPP_EXISTS=false" >> $GITHUB_ENV
          else
            echo "WEBAPP_EXISTS=true" >> $GITHUB_ENV
          fi
      
      - name: Create Web App if not exists
        if: env.WEBAPP_EXISTS == 'false'
        run: |
          az webapp create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --plan ${{ env.APP_SERVICE_PLAN }} \
            --name ${{ env.WEBAPP_NAME }} \
            --runtime "PYTHON|${{ env.PYTHON_VERSION }}"
      
      - name: Configure App Settings
        run: |
          # Set app settings for your Azure services - modify as needed for your application
          
          # SQL Database connection - matching the expected environment variables in db_utils.py
          echo "Checking SQL Server..."
          SQL_SERVER_EXISTS=$(az sql server list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.SQL_SERVER_NAME }}'].name" -o tsv)
          
          if [ ! -z "$SQL_SERVER_EXISTS" ]; then
            echo "SQL Server exists. Fetching FQDN..."
            SQL_SERVER_FQDN=$(az sql server show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.SQL_SERVER_NAME }} --query fullyQualifiedDomainName -o tsv)
            
            if [ ! -z "$SQL_SERVER_FQDN" ]; then
              echo "Setting SQL connection parameters as individual environment variables..."
              
              # Set individual environment variables for the Python app
              az webapp config appsettings set \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.WEBAPP_NAME }} \
                --settings \
                "SQL_SERVER=${SQL_SERVER_FQDN}" \
                "SQL_DATABASE=${{ env.SQL_DB_NAME }}" \
                "SQL_USER=${{ env.SQL_ADMIN_USER }}" \
                "SQL_PASSWORD=${{ secrets.SQL_ADMIN_PASSWORD }}"
              
              # Also try to set the connection string format for SQLCONNSTR_DefaultConnection
              # This is formatted for App Service to convert to SQLCONNSTR_DefaultConnection
              az webapp config appsettings set \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --name ${{ env.WEBAPP_NAME }} \
                --settings \
                "ConnectionStrings__DefaultConnection=Server=tcp:${SQL_SERVER_FQDN},1433;Database=${{ env.SQL_DB_NAME }};User ID=${{ env.SQL_ADMIN_USER }};Password=${{ secrets.SQL_ADMIN_PASSWORD }};Encrypt=true;Connection Timeout=30;"
                
              echo "SQL environment variables configured successfully"
            else
              echo "Could not fetch SQL Server FQDN. Skipping SQL configuration."
            fi
          else
            echo "SQL Server does not exist. Skipping SQL configuration."
          fi
          
          # Storage account connection
          STORAGE_CONNECTION=$(az storage account show-connection-string --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query connectionString -o tsv 2>/dev/null || echo "")
          if [ ! -z "$STORAGE_CONNECTION" ]; then
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "StorageAccount:ConnectionString=$STORAGE_CONNECTION"
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "StorageAccount:WardrobeContainer=${{ env.WARDROBE_CONTAINER }}"
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "StorageAccount:OutfitsContainer=${{ env.OUTFITS_CONTAINER }}"
          fi
          
          # Computer Vision
          VISION_KEY=$(az cognitiveservices account keys list --name ${{ env.COMPUTER_VISION_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query key1 -o tsv 2>/dev/null || echo "")
          VISION_ENDPOINT=$(az cognitiveservices account show --name ${{ env.COMPUTER_VISION_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.endpoint -o tsv 2>/dev/null || echo "")
          if [ ! -z "$VISION_KEY" ] && [ ! -z "$VISION_ENDPOINT" ]; then
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "ComputerVision:Key=$VISION_KEY"
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "ComputerVision:Endpoint=$VISION_ENDPOINT"
          fi
          
          # Text Analytics
          TEXT_KEY=$(az cognitiveservices account keys list --name ${{ env.TEXT_ANALYTICS_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query key1 -o tsv 2>/dev/null || echo "")
          TEXT_ENDPOINT=$(az cognitiveservices account show --name ${{ env.TEXT_ANALYTICS_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.endpoint -o tsv 2>/dev/null || echo "")
          if [ ! -z "$TEXT_KEY" ] && [ ! -z "$TEXT_ENDPOINT" ]; then
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "TextAnalytics:Key=$TEXT_KEY"
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "TextAnalytics:Endpoint=$TEXT_ENDPOINT"
          fi
          
          # App Insights
          APP_INSIGHTS_KEY=$(az monitor app-insights component show --app ${{ env.APP_INSIGHTS_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query instrumentationKey -o tsv 2>/dev/null || echo "")
          if [ ! -z "$APP_INSIGHTS_KEY" ]; then
            az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "APPINSIGHTS_INSTRUMENTATIONKEY=$APP_INSIGHTS_KEY"
          fi
          
          # Set WEBSITE_RUN_FROM_PACKAGE for zip deployment
          az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEBAPP_NAME }} --settings "WEBSITE_RUN_FROM_PACKAGE=1"
      
      - name: Build deployment package
        run: |
          # Create zip package with only the necessary files for deployment
          zip -r deployment.zip app/ utils/ app.py requirements.txt
      
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          package: ./deployment.zip
          
      - name: Logout from Azure
        run: |
          az logout