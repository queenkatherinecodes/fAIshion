name: Deploy fAIshion API to Azure

on:
  push:
    branches:
      - main  # or master, depending on your default branch name
  workflow_dispatch:  # Allows manual triggering

env:
  # Resource naming variables
  FASHION_APP_NAME: "faishion"
  FASHION_ENV: "dev"
  RESOURCE_GROUP: "faishion-dev-rg"
  LOCATION: "eastus"
  SQL_SERVER_NAME: "faishion-dev-sql"
  SQL_DB_NAME: "faishionDb"
  SQL_ADMIN_USER: "faishionadmin"
  STORAGE_ACCOUNT_NAME: "faishiondevstorage"
  WARDROBE_CONTAINER: "wardrobe"
  OUTFITS_CONTAINER: "outfits"
  APP_SERVICE_PLAN: "faishion-dev-plan"
  WEB_APP_NAME: "faishion-dev-app"
  COMPUTER_VISION_NAME: "faishion-dev-vision"
  TEXT_ANALYTICS_NAME: "faishion-dev-text"
  APP_INSIGHTS_NAME: "faishion-dev-insights"
  
jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Create Resource Group if not exists
        run: |
          if ! az group show --name ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }} \
              --tags "app=fAIshion" "environment=${{ env.FASHION_ENV }}" "project=student"
            echo "Resource group created."
          else
            echo "Resource group already exists."
          fi
      
      - name: Check SQL Server and create if needed
        run: |
          if ! az sql server show --name ${{ env.SQL_SERVER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating SQL Server..."
            az sql server create \
              --name ${{ env.SQL_SERVER_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --admin-user ${{ env.SQL_ADMIN_USER }} \
              --admin-password "${{ secrets.SQL_ADMIN_PASSWORD }}"
              
            echo "Configuring SQL Server firewall..."
            az sql server firewall-rule create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server ${{ env.SQL_SERVER_NAME }} \
              --name "AllowAzureServices" \
              --start-ip-address 0.0.0.0 \
              --end-ip-address 0.0.0.0
              
            echo "Creating SQL Database..."
            az sql db create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server ${{ env.SQL_SERVER_NAME }} \
              --name ${{ env.SQL_DB_NAME }} \
              --service-objective Basic
          else
            echo "SQL Server already exists."
          fi
      
      - name: Check Storage Account and create if needed
        run: |
          if ! az storage account show --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Storage Account..."
            az storage account create \
              --name ${{ env.STORAGE_ACCOUNT_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --sku Standard_LRS \
              --kind StorageV2 \
              --access-tier Hot
              
            echo "Getting Storage Account key..."
            STORAGE_KEY=$(az storage account keys list --resource-group ${{ env.RESOURCE_GROUP }} --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --query "[0].value" -o tsv)
            
            echo "Creating Blob Containers..."
            az storage container create \
              --name ${{ env.WARDROBE_CONTAINER }} \
              --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
              --account-key $STORAGE_KEY \
              --public-access blob
              
            az storage container create \
              --name ${{ env.OUTFITS_CONTAINER }} \
              --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
              --account-key $STORAGE_KEY \
              --public-access blob
          else
            echo "Storage Account already exists."
          fi
          
      - name: Check App Service Plan & Web App and create if needed
        run: |
          # Array of regions to try
          REGIONS=("eastus" "westus" "westus2" "centralus" "southcentralus")
          
          if ! az appservice plan show --name ${{ env.APP_SERVICE_PLAN }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            for REGION in "${REGIONS[@]}"; do
              echo "Trying to create App Service Plan in $REGION..."
              if az appservice plan create \
                --name ${{ env.APP_SERVICE_PLAN }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --sku F1 \
                --is-linux \
                --location $REGION \
                --tags "app=fAIshion" "environment=${{ env.FASHION_ENV }}" "project=student" &> /dev/null; then
                echo "Successfully created App Service Plan in $REGION"
                APP_LOCATION=$REGION
                break
              else
                echo "Failed to create in $REGION, trying next..."
              fi
            done
            
            if [ -z "$APP_LOCATION" ]; then
              echo "Could not create App Service Plan in any region."
              exit 1
            fi
          else
            echo "App Service Plan already exists."
          fi
          
          if ! az webapp show --name ${{ env.WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            echo "Creating Web App..."
            az webapp create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --plan ${{ env.APP_SERVICE_PLAN }} \
              --name ${{ env.WEB_APP_NAME }} \
              --runtime "PYTHON|3.9" \
              --tags "app=fAIshion" "environment=${{ env.FASHION_ENV }}" "project=student"
          else
            echo "Web App already exists."
          fi
      
      - name: Configure Web App Settings
        run: |
          # Set the app settings without the storage connection string
          echo "Setting application settings..."
          az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --settings \
            "SQL_SERVER=${{ env.SQL_SERVER_NAME }}.database.windows.net" \
            "SQL_DATABASE=${{ env.SQL_DB_NAME }}" \
            "SQL_USER=${{ env.SQL_ADMIN_USER }}" \
            "SQL_PASSWORD=${{ secrets.SQL_ADMIN_PASSWORD }}" \
            "WEBSITE_RUN_FROM_PACKAGE=1" \
            "SCM_DO_BUILD_DURING_DEPLOYMENT=true"
          
          # Set the container settings separately
          az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --settings \
            "StorageAccount:WardrobeContainer=${{ env.WARDROBE_CONTAINER }}" \
            "StorageAccount:OutfitsContainer=${{ env.OUTFITS_CONTAINER }}"
          
          # Set API keys separately
          echo "Setting API keys..."
          az webapp config appsettings set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --settings \
            "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}"
          
          # Try to update python version if necessary
          echo "Setting Python version..."
          az webapp config set --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --linux-fx-version "PYTHON|3.9" || true
            
      - name: Get Web App URL
        id: get_webapp_url
        run: |
          WEB_APP_URL=$(az webapp show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.WEB_APP_NAME }} --query defaultHostName -o tsv)
          echo "::set-output name=url::https://$WEB_APP_URL"
          
  deploy-application:
    needs: setup-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found, continuing anyway"
          pip install gunicorn uvicorn fastapi
          
      - name: Create startup.sh
        run: |
          echo "gunicorn -w 4 -k uvicorn.workers.UvicornWorker app:app --bind=0.0.0.0" > startup.sh
          chmod +x startup.sh
          
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEB_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
          
      - name: Output Application URL
        run: |
          echo "fAIshion API is now available at: https://${{ env.WEB_APP_NAME }}.azurewebsites.net"
          echo "Try a test request with: 'curl https://${{ env.WEB_APP_NAME }}.azurewebsites.net/health'"